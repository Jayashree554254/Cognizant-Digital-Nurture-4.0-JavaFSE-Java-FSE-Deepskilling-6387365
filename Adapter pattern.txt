Exercise 4: Implementing the Adapter Pattern
Scenario: 
You are developing a payment processing system that needs to integrate with multiple third-party payment gateways with different interfaces. Use the Adapter Pattern to achieve this.
Steps:
1.	Create a New Java Project:
·	Create a new Java project named AdapterPatternExample.
2.	Define Target Interface:
·	Create an interface PaymentProcessor with methods like processPayment().
3.	Implement Adaptee Classes:
·	Create classes for different payment gateways with their own methods.
4.	Implement the Adapter Class:
·	Create an adapter class for each payment gateway that implements PaymentProcessor and translates the calls to the gateway-specific methods.
5.	Test the Adapter Implementation:
·	Create a test class to demonstrate the use of different payment gateways through the adapter.
Solution:
package AdapterPatternExample;

public interface PaymentProcessor {
	void processPayment(double amount);
	}
package AdapterPatternExample;

class PayPalAdapter implements PaymentProcessor {
    private PayPalGateway paypal = new PayPalGateway();

    public void processPayment(double amount) {
        paypal.makePayment(amount);
    }
}
package AdapterPatternExample;

public class PayPalGateway {
    void makePayment(double amount) {
        System.out.println("Paid ₹" + amount + " using PayPal.");
    }

}
package AdapterPatternExample;

class StripeAdapter implements PaymentProcessor {
    private StripeGateway stripe = new StripeGateway();

    public void processPayment(double amount) {
        stripe.chargeCard(amount);
    }
}
package AdapterPatternExample;

public class StripeGateway {
	void chargeCard(double amount) {
        System.out.println("Charged ₹" + amount + " using Stripe.");
    }

}
Output:
 Opening Word Document...
Opening PDF Document...
Opening Excel Document...

