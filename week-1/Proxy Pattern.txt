Exercise 6: Implementing the Proxy Pattern
Scenario: 
You are developing an image viewer application that loads images from a remote server. Use the Proxy Pattern to add lazy initialization and caching.
Steps:
1.	Create a New Java Project:
·	Create a new Java project named ProxyPatternExample.
2.	Define Subject Interface:
·	Create an interface Image with a method display().
3.	Implement Real Subject Class:
·	Create a class RealImage that implements Image and loads an image from a remote server.
4.	Implement Proxy Class:
·	Create a class ProxyImage that implements Image and holds a reference to RealImage.
·	Implement lazy initialization and caching in ProxyImage.
5.	Test the Proxy Implementation:
·	Create a test class to demonstrate the use of ProxyImage to load and display images.
Solution:
package ProxyPatternExample;

public interface Image {
	void display();
}
package ProxyPatternExample;

class RealImage implements Image {
    private String filename;

    public RealImage(String filename) {
        this.filename = filename;
        loadImage();
    }

    private void loadImage() {
        System.out.println("Loading image: " + filename);
    }

    public void display() {
        System.out.println("Displaying image: " + filename);
    }
}
package ProxyPatternExample;

class ProxyImage implements Image {
    private String filename;
    private RealImage realImage;

    public ProxyImage(String filename) {
        this.filename = filename;
    }

    public void display() {
        if (realImage == null) {
            realImage = new RealImage(filename);
        }
        realImage.display();
    }
}
package ProxyPatternExample;

public class ProxyPatternTest {
    public static void main(String[] args) {
        Image image = new ProxyImage("cat.png");
        image.display();  
        image.display();  
    }

}
Output:
Loading image: cat.png
Displaying image: cat.png
Displaying image: cat.png

 

