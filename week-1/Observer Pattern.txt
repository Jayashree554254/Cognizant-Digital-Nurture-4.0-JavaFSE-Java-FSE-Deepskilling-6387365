Exercise 7: Implementing the Observer Pattern
Scenario: 
You are developing a stock market monitoring application where multiple clients need to be notified whenever stock prices change. Use the Observer Pattern to achieve this.
Steps:
1.	Create a New Java Project:
·	Create a new Java project named ObserverPatternExample.
2.	Define Subject Interface:
·	Create an interface Stock with methods to register, deregister, and notify observers.
3.	Implement Concrete Subject:
·	Create a class StockMarket that implements Stock and maintains a list of observers.
4.	Define Observer Interface:
·	Create an interface Observer with a method update().
5.	Implement Concrete Observers:
·	Create classes MobileApp, WebApp that implement Observer.
6.	Test the Observer Implementation:
·	Create a test class to demonstrate the registration and notification of observers.
Solution:
package ObserverPatternExample;

public interface Observer {
	void update(String stockName, double stockPrice);
}
package ObserverPatternExample;


	public interface Stock {
	    void registerObserver(Observer o);
	    void removeObserver(Observer o);
	    void notifyObservers();
	}
    package ObserverPatternExample;

import java.util.ArrayList;
import java.util.List;

public class StockMarket implements Stock {
    private List<Observer> observers = new ArrayList<>();
    private String stockName;
    private double stockPrice;

    public void setStockData(String name, double price) {
        this.stockName = name;
        this.stockPrice = price;
        notifyObservers();
    }

    public String getStockName() {
        return stockName;
    }

    public double getStockPrice() {
        return stockPrice;
    }

    
    public void registerObserver(Observer o) {
        observers.add(o);
    }

    public void removeObserver(Observer o) {
        observers.remove(o);
    }
    public void notifyObservers() {
        for (Observer o : observers) {
            o.update(stockName, stockPrice);
        }
    }
}
package ObserverPatternExample;

public class WebApp implements Observer {
    private String username;

    public WebApp(String username) {
        this.username = username;
    }
    public void update(String stockName, double stockPrice) {
        System.out.println("WebApp [" + username + "] - Stock Update: " + stockName + " is now ₹" + stockPrice);
    }
}
package ObserverPatternExample;

public class MobileApp implements Observer {
    private String user;

    public MobileApp(String user) {
        this.user = user;
    }

    
    public void update(String stockName, double stockPrice) {
        System.out.println("MobileApp [" + user + "] - Stock Update: " + stockName + " is now ₹" + stockPrice);
    }
}
package ObserverPatternExample;

public class ObserverPatternTest {
    public static void main(String[] args) {
        StockMarket market = new StockMarket();

        Observer mobileUser1 = new MobileApp("Jayashree");
        Observer webUser1 = new WebApp("Investor123");

        market.registerObserver(mobileUser1);
        market.registerObserver(webUser1);

        market.setStockData("TCS", 3870.50);
        market.setStockData("INFY", 1523.75);

        market.removeObserver(mobileUser1);

        market.setStockData("WIPRO", 430.25);
    }
}
Output:
MobileApp [Jayashree] - Stock Update: TCS is now ₹3870.5
WebApp [Investor123] - Stock Update: TCS is now ₹3870.5
MobileApp [Jayashree] - Stock Update: INFY is now ₹1523.75
WebApp [Investor123] - Stock Update: INFY is now ₹1523.75
WebApp [Investor123] - Stock Update: WIPRO is now ₹430.25


