//applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Repository bean -->
    <bean id="bookRepository" class="com.library.repository.BookRepository" />

    <!-- Service bean with setter injection -->
    <bean id="bookService" class="com.library.service.BookService">
        <!-- property name must match the setter in BookService -->
        <property name="bookRepository" ref="bookRepository" />
    </bean>
</beans>



package com.library.service;

import com.library.repository.BookRepository;

public class BookService {

    private BookRepository bookRepository;   // dependency

    // Setter used by Spring for DI
    public void setBookRepository(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    // Example business method
    public void addBook(String title) {
        System.out.println("Adding book: " + title);
        bookRepository.saveBook(title);
    }
}


//â€¯Test with  LibraryManagementApplication

package com.library;

import com.library.service.BookService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        ApplicationContext ctx =
            new ClassPathXmlApplicationContext("applicationContext.xml");

        BookService service = ctx.getBean("bookService", BookService.class);
        service.addBook("Clean Code");   // verify DI works
    }
}

Output:

Adding book: Clean Code
Book 'Clean Code' saved to the database.